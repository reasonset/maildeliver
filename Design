localdeliv
    * load setting (ENV["maildeliv_conf"] || ~/.yek/maildeliv/maildelivrc.rb)
    * readmail
    * get mail object with [ getheader ]
    * add parsed addr value to a mail object with [ getaddr ]
    * Exec before plugins
    * Check with clamav if with --clam option.
    * Call mailfilter. (possibile to break)
    * Check with spamassasin if with --assassin option.
    * If not match yet, save folder with default rule.
    * Exec after plugins
    
    #Behave
    Output any error to STDERR
    and output message with saving to STDOUT.
    
getheader(mailstr) -> mailobj
    * divide a mail into header and body
    * header to a Hash
    * body into the Hash's accessor #body
    * mail string into the Hash's accessor #mail
    * return the object.

getaddr(mailobj) -> mailobj
    * recieve a mail object.
    * check sender address includes any my address on conffile.
    * define mailobj.direction. it returns :send (my address is included) or :recieve
    * Extruct address from "from"(my address is not included) or "to" header
      and define mailobj.address. the value is a Alias in CONFFILE.
    * define mailobj.in. It returns MyAddress alias.
    
mailfilter(mailobj) -> nil or break.
    * Load userdefined mail filter

    This file provides methods:
        savemail(folder, exit=nil) :
          save mail to the folder.
          If exit is true, exit with zero status when after saving.
        destorymail :
          Finish mail sorting and saving.
          
    and provides classes:
        Filter(condproc, trueproc)
        

MODULING
    * Put modules anywhere.
    * If there's not in LOAD_PATH, indicate by MAILDELIV_CONF[:ModuleDir]
    * Each module defines a module. localdeliv will include them.
    * If you want to use a module without localdeliv, include by your hands.
    * Configuration file parse by instance_eval in localdeliv object.
        
CONFFILE
    * written by Ruby.
    * define a Hash "@maildeliv_conf"
    
    [:ModuleDir] (String) (Optional)
      MailDeliv Ruby libraries directory.
    [:MH] (String) (Default=~/Mail)
      MH mail folder path.
    [:MyAddress] (Hash)
      Alias -> Address(fileglob)
    [:VirusIsolation] (String)
      folder for positive judgment in anti virus.
      / means MH/
    [:SpamIsolation] (String)
      folder for positive judgment in spam filter.
      / means MH/
    [:FilterRules] (String)(Optional)
      File path of user defined filter instead ~/.yek/maildeliv/mdafilter.rb.
    [:FilterLog] (String or nil)
      File path of user defined filter error log file.
      If set nil, do not log.
    [:DefaultRule] (Proc->(mailobj) -> String)
      Return Default mail folder.
    [:BeforePlugins] (Procs(mailobj) in Array) (Optional)
      Called before filtering.
    [:AfterPlugins] (Procs(mailobj) in Array) (Optional)
      Called after filtering.
      
    
    
USERFILTER (~/.yek/filter_rules.rb)
    Define a Array "@filter_rules".
    The array has nested arrays.
    each array is a Filter.
    
    a Filter object takes two Proc arguments.
    
UTILITY

    standard-notify.rb [ARG | ARG=VAL ...]
    * check recieving mail (directory, YAML files)
    * Assemble header Array and summery database.
    * Call plugins in ~/.yek/maildeliver/notify-plugins/
    * args -> @arg[ARG] = VAL || true
    
    sound-notify.rb (PLUGIN)
    * load ~/.yek/maildeliver/playsound.rb
    * matcing with @playsound_rules
    * Play sound with SOX play command.
    * Prepare Rule Struct for rules (Match).
    
    notify_send
